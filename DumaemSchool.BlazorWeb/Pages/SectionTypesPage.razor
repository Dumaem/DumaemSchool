@page "/section-types"

@using DumaemSchool.Auth.Models;
@using DumaemSchool.Core.DataManipulation;
@using DumaemSchool.Core.Models
@using MediatR;
@using DataGridEditMode = Radzen.DataGridEditMode
@using Variant = Radzen.Variant
@using DumaemSchool.BlazorWeb.Shared.Dialogs
@using DumaemSchool.Core.Commands.SectionType
@using DumaemSchool.Core.Queries.Section

@inject ISender Sender;
@inject IDialogService DialogService
<AuthorizeView Roles="@Role.DeputyDirector" Context="Authorized">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mb-4" Text="Добавить вид кружка"
                        Click="@InsertRow" Disabled=@(sectionTypeToInsert != null || sectionTypeToUpdate != null)/>
        <RadzenDataGrid @ref="sectionTypesGrid" AllowAlternatingRows="false" AllowFiltering="false" AllowPaging="true" PageSize="8"
                        AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@sectionTypes" TItem="SectionType"
                        RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset"
                        Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="SectionType" Property="Name" Title="Название вида кружка">
                    <EditTemplate Context="sectionType">
                        <RadzenTextBox @bind-Value="sectionType.Name" Style="width:100%; display: block" Name="Name"/>
                        <RadzenRequiredValidator Text="Название вида кружка обязательно!" Component="Name" Popup="true"/>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SectionType" Context="sectionType" Filterable="false" Sortable="false"
                                        TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="sectionType">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                        Size="ButtonSize.Medium" Click="@(() => EditRow(sectionType))"
                                        @onclick:stopPropagation="true"/>

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                        Click="@(() => DeleteRow(sectionType))" @onclick:stopPropagation="true"/>
                    </Template>

                    <EditTemplate Context="sectionType">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                                        Size="ButtonSize.Medium" Click="@(() => SaveRow(sectionType))"/>

                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                        Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => CancelEdit(sectionType))"/>

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                        Click="@(() => DeleteRow(sectionType))"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </MudContainer>
</AuthorizeView>

@code {
    RadzenDataGrid<SectionType> sectionTypesGrid = null!;
    IEnumerable<SectionType> sectionTypes = null!;

    SectionType? sectionTypeToInsert;
    SectionType? sectionTypeToUpdate;

    void Reset()
    {
        sectionTypeToInsert = null;
        sectionTypeToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ReloadServerData();
    }

    async Task EditRow(SectionType sectionType)
    {
        sectionTypeToUpdate = sectionType;
        await sectionTypesGrid.EditRow(sectionType);
    }

    async Task OnUpdateRow(SectionType sectionType)
    {
        Reset();

        var updateSectionTypeNameCommand = new UpdateSectionTypeNameCommand(sectionType);
        var res = await Sender.Send(updateSectionTypeNameCommand);

        await ReloadServerData();
    }

    async Task SaveRow(SectionType sectionType)
    {
        await sectionTypesGrid.UpdateRow(sectionType);
    }

    async Task CancelEdit(SectionType sectionType)
    {
        Reset();

        sectionTypesGrid.CancelEditRow(sectionType);
        await ReloadServerData();
    }

    async Task DeleteRow(SectionType sectionType)
    {
        Reset();
        if (sectionTypes.Contains(sectionType))
        {
            bool isAgreedToDelete = await IsSuccessDeleteDialogResult();

            if (!isAgreedToDelete)
            {
                return;
            }
            var deleteSectionTypeCommand = new DeleteSectionTypeCommand(sectionType.Id);
            var res = await Sender.Send(deleteSectionTypeCommand);

            await sectionTypesGrid.Reload();
            await ReloadServerData();
        }
        else
        {
            sectionTypesGrid.CancelEditRow(sectionType);
            await sectionTypesGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        sectionTypeToInsert = new SectionType();
        await sectionTypesGrid.InsertRow(sectionTypeToInsert);
    }

    async Task OnCreateRow(SectionType sectionType)
    {
        var addSectionTypeCommand = new AddSectionTypeCommand(sectionType.Name);
        var res = await Sender.Send(addSectionTypeCommand);

        sectionTypeToInsert = null;
        await ReloadServerData();
    }

    async Task ReloadServerData()
    {
        var result = await Sender.Send(new SectionTypesQuery(new ListParam()));
        sectionTypes = result.Items;
    }

    private async Task<bool> IsSuccessDeleteDialogResult()
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            ["DialogContent"] = "Вы уверены, что хотите удалить данный вид кружка?"
        };
        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение удаления", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }
}