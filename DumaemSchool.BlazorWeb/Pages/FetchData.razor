@page "/fetchdata"
@using DumaemSchool.BlazorWeb.Data
@using DumaemSchool.Core.DataManipulation
@using DumaemSchool.Core.OutputModels
@using DumaemSchool.Core.Queries.Section
@using MediatR
@inject WeatherForecastService ForecastService
@inject ISender Sender;
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button style="background-color: green; width: 20px; height: 20px;" onclick="@LogIn"></button>
@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private async Task LogIn()
    {
        var teachers = await Sender.Send(new SectionStudentsToAddQuery(new ListParam
        {
            Filters = new[] { new FilterDefinition() { FieldName = nameof(StudentToAddToSection.SectionId), Operand = FilterOperand.Equal, Value = 2 } }
        }));
    }

}