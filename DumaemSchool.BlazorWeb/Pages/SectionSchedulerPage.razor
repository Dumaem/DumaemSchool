@page "/lessons"
@using DumaemSchool.Core.OutputModels

<RadzenScheduler @ref=@scheduler  SlotRender=@OnSlotRender Style="height: 768px; mt-5%; ml-3%; mr-3%" 
TItem="LessonForScheduler" Data="@appointments" StartProperty="LessonStart" EndProperty="LessonEnd" SelectedIndex="2" 
    TextProperty="SectionGroupName" TodayText="На сегодняшний день" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView Text="День"/>
    <RadzenWeekView Text="Неделя"/>
    <RadzenMonthView Text="Месяц"/>
</RadzenScheduler>


@code {
    RadzenScheduler<LessonForScheduler>? scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<LessonForScheduler> appointments = new List<LessonForScheduler>
    {
        new LessonForScheduler { LessonStart = DateTime.Today.AddDays(-2), Duration = new TimeSpan(0, 45, 0), SectionGroupName = "Birthday" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddDays(-11), Duration = new TimeSpan(0, 25, 0), SectionGroupName = "Day off" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddDays(-10), Duration = new TimeSpan(0, 55, 0), SectionGroupName = "Work from home" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddHours(10), Duration = new TimeSpan(1, 25, 0), SectionGroupName = "Online meeting" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddHours(10), Duration = new TimeSpan(2, 0, 0), SectionGroupName = "Skype call" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddHours(14), Duration = new TimeSpan(1, 0, 0), SectionGroupName = "Dentist appointment" },
        new LessonForScheduler { LessonStart = DateTime.Today.AddDays(1), Duration = new TimeSpan(0, 40, 0), SectionGroupName = "Vacation" },
    };


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // if (args.View.Text != "Year")
        // {
        //     Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //         new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //     if (data != null)
        //     {
        //         appointments.Add(data);
        //         // Either call the Reload method or reassign the Data property of the Scheduler
        //         await scheduler.Reload();
        //     }
        // }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<LessonForScheduler> args)
    {
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<LessonForScheduler> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        args.Attributes["style"] = "background: #5D9C59";


        if (args.Data.IsReplacement)
        {
            args.Attributes["style"] = "background: orange";
        }

        if(args.Data.IsCancelled)
        {
            args.Attributes["style"] = "background: red";

        }
    }

}
