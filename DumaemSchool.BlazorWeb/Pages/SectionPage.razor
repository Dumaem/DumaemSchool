@page "/section/{id:int}"
@using DumaemSchool.Core.Commands.Teacher;
@using DumaemSchool.Core.Queries.Teacher;
@using DumaemSchool.Core.Queries.Section

@inject NavigationManager NavigationManager;
@inject ISender Sender;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Кружок</PageTitle>

<AuthorizeView Roles="@Role.DeputyDirector">
    <Authorized>
        <MudContainer Class="d-inline-flex justify-content-between mt-3 mb-3 align-items-center">
            <MudTooltip Text="Статистика">
                <MudIconButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Insights"/>
            </MudTooltip>
            <MudAutocomplete Variant="MudBlazor.Variant.Outlined" Class="ml-4 align-content-center" T="TeacherDto" Label="Преподаватель кружка"
                             @bind-Value="_selectedTeacher" ToStringFunc="@(e => e == null ? null : $"{e.Name}")"
                             SearchFunc="@SearchTeachersToSelect" CoerceText="true"/>
            <MudButton Class="ml-4" Disabled="@(_oldTeacherId == _selectedTeacher?.Id)" OnClick="@AddTeacherToSection"
                       Variant="MudBlazor.Variant.Filled" Color="Color.Primary">
                Сохранить
            </MudButton>
        </MudContainer>
    </Authorized>
</AuthorizeView>


<MudTabs Elevation="4" Rounded="false" Color="@Color.Primary">
    @if (_initialized)
    {
        <MudTabPanel Icon="@Icons.Material.Filled.Groups" Text="Список учеников">
            <Students SectionId="@Id"></Students>
        </MudTabPanel>

        <MudTabPanel Icon="@Icons.Material.Filled.CalendarMonth" Text="Расписание кружка">
            <Schedule SectionId="@Id"></Schedule>
        </MudTabPanel>

        <MudTabPanel Icon="@Icons.Material.Filled.LocalActivity" Text="Активность и посещаемость">
            <ActivityAndAttendance SectionId="@Id"></ActivityAndAttendance>
        </MudTabPanel>
    }
    else
    {
        <MudProgressCircular/>
    }
</MudTabs>


@code {

    [Parameter]
    public int Id { get; set; }

    private bool _initialized;
    private TeacherDto? _selectedTeacher;

    private int _oldTeacherId;

    private List<TeacherDto>? _teachersToSelect;

    protected override async Task OnInitializedAsync()
    {
        _selectedTeacher = await Sender.Send(new GetTeacherFromSectionQuery(Id));
        if (_selectedTeacher is null)
        {
            NavigationManager.NavigateTo($"/sections", true);
            return;
        }

        _oldTeacherId = _selectedTeacher.Id;
        await CheckAccessToWatchPage();
        _initialized = true;
    }

    private async Task<IEnumerable<TeacherDto>> SearchTeachersToSelect(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _teachersToSelect = (await Sender.Send(new TeachersQuery(new ListParam()))).Items.ToList();
        }

        return _teachersToSelect = (await Sender.Send(new TeachersQuery(new ListParam
        {
            Filters = new[] { new FilterDefinition { Value = value, Operand = FilterOperand.Contains, FieldName = nameof(TeacherDto.Name) } }
        }))).Items.ToList();
    }

    private async Task<bool> IsTeacherAvailable()
    {
        var listSchedulesForSection = (await Sender.Send(new SectionScheduleQuery(new ListParam
        {
            Filters = new[]
            {
                new FilterDefinition { Value = Id, Operand = FilterOperand.Equal, FieldName = nameof(SectionSchedule.SectionId) }
            }
        }))).Items.ToList();

        var checkTeacherCommand = new CheckTeacherAvailabilityToSectionCommand(_selectedTeacher!.Id, listSchedulesForSection);
        var res = await Sender.Send(checkTeacherCommand);

        return res;
    }

    private async Task CheckAccessToWatchPage()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (userIdentity.IsInRole(Role.DeputyDirector))
        {
            return;
        }

        if (!((int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.TeacherId).Value)) == _oldTeacherId))
        {
            NavigationManager.NavigateTo($"/sections", true);
        }
    }

    public async Task AddTeacherToSection()
    {
        if (!await IsTeacherAvailable())
        {
            Snackbar.Add("Расписание кружков, которые проводит преподаватель, пересекается с расписанием данного кружка!", Severity.Warning);
            return;
        }

        var isAgreedToAdd = await IsSuccessAddDialogResult();

        if (!isAgreedToAdd)
        {
            return;
        }

        var addStudentToSectionCommand = new AddTeacherToSectionCommand(_selectedTeacher!.Id, Id);
        var res = await Sender.Send(addStudentToSectionCommand);

        Snackbar.Add("Преподаватель успешно закреплен за кружком!", Severity.Success);

        _oldTeacherId = _selectedTeacher.Id;
    }

    private async Task<bool> IsSuccessAddDialogResult()
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            ["DialogContent"] = "Вы уверены, что хотите записать данного преподавателя за этим кружком?",
            ["Color"] = MudBlazor.Color.Primary
        };

        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение закрепления за кружком", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }

}