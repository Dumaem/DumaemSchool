@page "/section/{id:int}"
@using DumaemSchool.Auth.Models;
@using DumaemSchool.BlazorWeb.Shared.Dialogs;
@using DumaemSchool.Core.Commands.Section;
@using DumaemSchool.Core.Commands.Teacher;
@using DumaemSchool.Core.Models;
@using DumaemSchool.Core.Queries.Teacher;
@using MediatR
@using DumaemSchool.Core.OutputModels
@using DumaemSchool.Core.Queries
@using DumaemSchool.Core.DataManipulation
@using DumaemSchool.BlazorWeb.Data.Converters
@using DumaemSchool.Core.Queries.Section
@inject NavigationManager NavigationManager;
@inject ISender Sender;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;


<AuthorizeView Roles="@Role.DeputyDirector">
    <Authorized>
        <MudContainer Class="d-flex justify-content-between mt-1">
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Получить статистику</MudButton>

            <MudAutocomplete Class="ml-4" T="TeacherDto" Label="Преподаватель кружка" @bind-Value="_selectedTeacher" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" SearchFunc="@SearchTeachersToSelect" CoerceText="true"  />
            <MudButton Class="ml-2" Disabled="@(_oldTeacher == _selectedTeacher)" Variant="MudBlazor.Variant.Filled" Color="Color.Primary">Сохранить</MudButton>
        </MudContainer>
    </Authorized>
</AuthorizeView>

<MudTabs Elevation="4" Rounded="false" Color="@Color.Primary">
    <MudTabPanel Icon="@Icons.Material.Filled.Groups" Text="Список учеников">
        <Students SectionId="@Id"></Students>
    </MudTabPanel>

    <MudTabPanel Icon="@Icons.Material.Filled.CalendarMonth" Text="Расписание кружка">
        <Schedule SectionId="@Id"></Schedule>
    </MudTabPanel>

    <MudTabPanel Icon="@Icons.Material.Filled.LocalActivity" Text="Активность и посещаемость"> 
        <ActivityAndAttendance SectionId="@Id"></ActivityAndAttendance>
    </MudTabPanel>
</MudTabs>


@code {
    [Parameter]
    public int Id { get; set; }

    private TeacherDto? _selectedTeacher;

    private TeacherDto? _oldTeacher;

    private HashSet<TeacherDto>? _teachersToSelect;


    protected override async Task OnInitializedAsync()
    { 
        _selectedTeacher = (await(Sender.Send(new GetTeacherFromSectionQuery(Id))));
        _oldTeacher = _selectedTeacher;
    }



    private async Task<IEnumerable<TeacherDto>> SearchTeachersToSelect(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return _teachersToSelect = (await Sender.Send(new TeachersQuery(new ListParam()))).Items.ToHashSet();
        }

        return _teachersToSelect = (await Sender.Send(new TeachersQuery(new ListParam
            {
                Filters = new[] { new FilterDefinition { Value = value, Operand = FilterOperand.Contains, FieldName = "Name" } }
            }))).Items.ToHashSet();
    }

    private async Task<bool> IsTeacherAvailable()
    {
        var listSchedulesForSection = (await Sender.Send(new SectionScheduleQuery(new ListParam
            {
                Filters = new[]
                        {
                new FilterDefinition {Value = Id, Operand = FilterOperand.Equal, FieldName = "SectionId"}
            }
            }))).Items.ToList();

        var checkTeacherCommand = new CheckTeacherAvailabilityToSectionCommand(_selectedTeacher!.Id, listSchedulesForSection);
        var res = await Sender.Send(checkTeacherCommand);

        return res;
    }

    public async Task AddTeacherToSection()
    {
        if (!await IsTeacherAvailable())
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add("Расписание кружков, которые проводит преподаватель, пересекается с расписанием данного кружка!", Severity.Warning);
            return;
        }

        var isAgreedToAdd = await IsSuccessAddDialogResult();

        if (!isAgreedToAdd)
        {
            return;
        }

        var addStudentToSectionCommand = new AddTeacherToSectionCommand(_selectedTeacher!.Id, Id, _oldTeacher!.Id);
        var res = await Sender.Send(addStudentToSectionCommand);

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        Snackbar.Add("Преподаватель успешно закреплен за кружком!", Severity.Success);

        _oldTeacher = _selectedTeacher;
    }

    private async Task<bool> IsSuccessAddDialogResult()
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
            {
                ["DialogContent"] = "Вы уверены, что хотите записать данного преподавателя за этим кружком?",
                ["Color"] = MudBlazor.Color.Primary
            };

        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение закрепления за кружком", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }
}
