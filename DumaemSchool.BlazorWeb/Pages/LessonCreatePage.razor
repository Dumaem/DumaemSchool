@page "/lesson"
@using DumaemSchool.Core.OutputModels
@using Variant = MudBlazor.Variant
@using System.Globalization
@using DumaemSchool.Auth.Models
@using DumaemSchool.Core.Commands.Lesson
@using DumaemSchool.Core.Models
@using MediatR
@using Role = DumaemSchool.Auth.Models.Role
@using Schedule = DumaemSchool.BlazorWeb.Shared.Schedule

@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider;
@inject IDialogService DialogService;
@inject ISender Sender;
@inject ISnackbar Snackbar;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
    <AuthorizeView Roles="@Role.DeputyDirector">
        <div class="d-flex justify-content-md-between align-items-middle">
            <MudContainer Class="ma-0 pa-0" MaxWidth="MaxWidth.False">
                <MudTextField InputType="InputType.Text" Variant="Variant.Outlined" T="string" ReadOnly="true" Label="Учитель" @bind-Value="@(_teacherForReplace.Name)"/>
            </MudContainer>
            <MudButton Class="ml-3" Style="width: 10vw" Variant="Variant.Filled" OnClick="@ShowTeachers" Color="Color.Primary">Выбрать учителя</MudButton>
        </div>
    </AuthorizeView>
    <div class="d-flex justify-content-md-between align-items-middle mt-5">
        <MudContainer Class="ma-0 pa-0" MaxWidth="MaxWidth.False">
            <MudTextField InputType="InputType.Text" Variant="Variant.Outlined" T="string" ReadOnly="true" Label="Кружок" @bind-Value="@(_selectedSection.GroupName)"/>
        </MudContainer>
        <MudButton Disabled="@(_teacherForReplace.Id == 0 && _teacherId == 0)" Class="ml-3" Style="width: 10vw" Variant="Variant.Filled" OnClick="@ShowSections" Color="Color.Primary">Выбрать кружок</MudButton>
    </div>
    <div class="d-flex justify-content-md-between flex-row align-items-middle mt-5">
        <MudContainer Class="ma-0 pa-0" MaxWidth="MaxWidth.False">
            <MudTable Items="_selectedSectionSchedule" T="SectionSchedule">
                <HeaderContent>
                    <MudTh>День недели</MudTh>
                    <MudTh>Время</MudTh>
                    <MudTh>Продолжительность</MudTh>
                    <MudTh>Кабинет</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudText>@(DateTimeFormatInfo.CurrentInfo.GetDayName(context.DayOfWeek))</MudText>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.Time</MudText>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.Duration </MudText>
                    </MudTd>
                    <MudTd>
                        <MudText>@context.Cabinet</MudText>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
        <MudButton Class="ml-3" Disabled="@(_selectedSection.Id == 0)" Style="width: 10vw" Variant="Variant.Filled" OnClick="@ShowSchedule" Color="Color.Primary">Выбрать расписание</MudButton>
    </div>
    <MudContainer Class="pa-0 ma-0 mt-5" MaxWidth="MaxWidth.False">
        <MudDatePicker MinDate="@(DateTime.Now - TimeSpan.FromDays(1))" @bind-Date="_selectedDate" Disabled="@(_selectedSectionSchedule.Count <= 0)" PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" Label="Дата проведения"
                       IsDateDisabledFunc="@((DateTime dt) => dt.DayOfWeek != _selectedSectionSchedule.First().DayOfWeek)"/>
    </MudContainer>
    <div class="d-flex flex-row mt-5">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="IsCanCreate" OnClick="@(async () => await CreateLesson())">Создать занятие</MudButton>
        <MudButton Class="ml-5" Color="Color.Error" Variant="Variant.Filled" Disabled="IsCanCreate" OnClick="@(async () => await RevokeLesson())">Отменить занятие</MudButton>
    </div>
</MudContainer>

@code {
    private SectionInfo _selectedSection = new();
    private List<SectionSchedule> _selectedSectionSchedule = new();
    private DateTime? _selectedDate;
    private bool IsCanCreate => !(_selectedSection.Id != 0 && _selectedSectionSchedule.Count > 0 && _selectedDate is not null);
    private int _teacherId;
    private TeacherDto _teacherForReplace = new();
    private bool _isConducted = true;
    
    private async Task ShowSections()
    {
        var options = new MudBlazor.DialogOptions
        {
            CloseOnEscapeKey = true, DisableBackdropClick = true, FullWidth = true,
            CloseButton = true, MaxWidth = MaxWidth.Large
        };
        var parameters = new DialogParameters
        {
            ["IsForLesson"] = true,
            ["TeacherId"] = _teacherForReplace.Id == 0 ? _teacherId : _teacherForReplace.Id
        };

        var dialog = await DialogService.ShowAsync<Sections>("Выбор кружка", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _selectedSection = (SectionInfo) result.Data;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user.IsInRole(Role.Teacher))
        {
            _teacherId = int.Parse(user.Claims.First(x => x.Type == UserClaims.TeacherId).Value);
        }
    }

    private async Task ShowSchedule()
    {
        var options = new MudBlazor.DialogOptions
        {
            CloseOnEscapeKey = true, DisableBackdropClick = true, FullWidth = true,
            CloseButton = true, MaxWidth = MaxWidth.Large
        };
        var parameters = new DialogParameters
        {
            ["IsForLesson"] = true,
            ["SectionId"] = _selectedSection.Id
        };

        var dialog = await DialogService.ShowAsync<Schedule>("Выбор из расписания", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _selectedSectionSchedule.Clear();
            _selectedSectionSchedule.Add((SectionSchedule) result.Data);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowTeachers()
    {
        var options = new MudBlazor.DialogOptions
        {
            CloseOnEscapeKey = true, DisableBackdropClick = true, FullWidth = true,
            CloseButton = true, MaxWidth = MaxWidth.Large
        };
        var parameters = new DialogParameters
        {
            ["IsForLesson"] = true,
        };

        var dialog = await DialogService.ShowAsync<Teachers>("Выбор Преподавателя", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _teacherForReplace = (TeacherDto) result.Data;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateLesson()
    {
        var checkLessonCreatedCommand = new CheckLessonCreatedCommand(_selectedSectionSchedule.First().Id,
            DateOnly.FromDateTime(_selectedDate ?? DateTime.Now));
        var checkResult = await Sender.Send(checkLessonCreatedCommand);

        if (checkResult)
        {
            Snackbar.Add("Занятие на этот день уже создано!", Severity.Error);
            return;
        }

        var newLesson = new Lesson
        {
            ScheduleId = _selectedSectionSchedule.First().Id,
            Date = DateOnly.FromDateTime(_selectedDate ?? DateTime.Now),
            TeacherId = _teacherForReplace.Id == 0 ? _teacherId : _teacherForReplace.Id, IsConducted = _isConducted
        };
        var createLessonCommand = new CreateLessonCommand(newLesson);
        var result = await Sender.Send(createLessonCommand);

        if (result.IsSuccess)
        {
            Snackbar.Add(!_isConducted ? "Занятие успешно отменено!" : "Занятие успешно создано!",
                !_isConducted ? Severity.Normal : Severity.Success);
        }
    }

    private async Task RevokeLesson()
    {
        _isConducted = false;
        await CreateLesson();
    }

}