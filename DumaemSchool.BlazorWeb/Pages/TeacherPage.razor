@page "/teacher/{id:int}"
@using DumaemSchool.Core.Commands.Teacher
@using DumaemSchool.Core.Queries.Teacher

@inject ISender Sender;
@inject NavigationManager NavigationManager;
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider;



@if (currentTeacher is null)
{
    return;
}

<MudContainer Style="margin-left: 0%;margin-top: 2%; width:30%">
    <MudText Typo="Typo.h4">Информация об учителе:</MudText>
    <MudSpacer></MudSpacer>

    <AuthorizeView Roles="@Role.DeputyDirector">
        <Authorized>
            <MudStack>
                <MudTextField Immediate @bind-Value="currentTeacher.Name"></MudTextField>
                 <MudButton Disabled="@(!TeacherNameChanged)" Variant="@MudBlazor.Variant.Filled"
                            OnClick="@(() => EditTeacher(currentTeacher))" Color="@Color.Primary">Изменить</MudButton>
             </MudStack>
        </Authorized>
    </AuthorizeView>

    <AuthorizeView Roles="@Role.Teacher">
        <Authorized>
            <MudText Style="margin-top: 2%" Typo="Typo.h5">@currentTeacher.Name</MudText>
        </Authorized>
    </AuthorizeView>

</MudContainer>

<Sections TeacherId="Id"></Sections>

 @code {

    [Parameter]
    public int Id { get; set; }

    private string? savedTeacherName;
    private Teacher? currentTeacher;

    private bool TeacherNameChanged => currentTeacher?.Name != savedTeacherName;


    protected override async Task OnInitializedAsync()
    {
        await CheckAccessToWatchPage();
        await GetTeacherData();
    }

    private async Task GetTeacherData()
    {
        var result = await Sender.Send(new TeacherInfoQuery(Id));
        if (result is not null)
        {
            currentTeacher = result;
            savedTeacherName = currentTeacher.Name;
        }
    }

    private async Task CheckAccessToWatchPage()
    {
        var userIdentity = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (userIdentity.IsInRole(Role.DeputyDirector))
        {
            return;
        }

        var teacherId = int.Parse(userIdentity.Claims.First(x => x.Type == UserClaims.TeacherId).Value);

        if(!((teacherId) == Id))
        {
            NavigationManager.NavigateTo($"teacher/{teacherId}", true);
        }
    }

    private async Task EditTeacher(Teacher teacher)
    {
        var editTeacherCommand = new EditTeacherNameCommand(teacher);
        var res = await Sender.Send(editTeacherCommand);

        await GetTeacherData();
    }
}
