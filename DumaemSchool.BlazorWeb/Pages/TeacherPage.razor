@page "/teacher/{id:int}"

@using System.Net.Http.Json
@using DumaemSchool.Auth.Models;
@using DumaemSchool.Core.Commands;
@using DumaemSchool.Core.DataManipulation;
@using DumaemSchool.Core.Models;
@using DumaemSchool.Core.OutputModels;
@using DumaemSchool.Core.Queries;
@using MediatR;
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;

@inject ISender Sender;
@inject NavigationManager NavigationManager;
@inject UserManager<SchoolUser> UserManager


@if (currentTeacher is null)
{
    return;
}

<MudContainer Style="margin-left: 0%;margin-top: 2%; width:30%">
    <MudText Typo="Typo.h4">Информация о преподавателе:</MudText>
    <MudSpacer></MudSpacer>

    <AuthorizeView Roles="@Role.DeputyDirector">
        <Authorized>
            <MudStack>
                <MudTextField Immediate @bind-Value="currentTeacher.Name"></MudTextField>
                 <MudButton Disabled="@(!IsTeacherNameChange())" Variant="@MudBlazor.Variant.Filled"
                            OnClick="@(() => EditTeacher(currentTeacher))" Color="@Color.Primary">Изменить</MudButton>
             </MudStack>
        </Authorized>
    </AuthorizeView>



    <AuthorizeView Roles="@Role.Teacher">
        <Authorized>
            <MudText Style="margin-top: 2%" Typo="Typo.h5">@currentTeacher.Name</MudText>
        </Authorized>
    </AuthorizeView>


</MudContainer>


<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
    <MudDataGrid Groupable="true" @ref="@_mudDataGrid" ServerData="@GetData" T="SectionInfo" Filterable="true" SortMode="@SortMode.Multiple" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Список кружков</MudText>
            <MudSpacer />

            <MudTextField ValueChanged="@(EventCallback.Factory.Create<string>(this, OnSearch))" Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>


        <Columns>
            <PropertyColumn Filterable="false" Property="x => x.GroupName" SortBy="x => x.GroupName" Title="Наименование кружка для группы" />
            <PropertyColumn Filterable="false" Property="x => x.TypeName" SortBy="x => x.TypeName" GroupBy="@_groupBy" Grouping="true" Title="Тип кружка">

                <GroupTemplate>
                    <span style="font-weight:bold">Тип кружка: @context.Grouping.Key</span>
                </GroupTemplate>

            </PropertyColumn>
            <PropertyColumn Filterable="false" Property="x => x.LessonPerWeek" SortBy="x => x.LessonPerWeek" Grouping="true" Title="Кол-во проводимых занятий в неделю" />

            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Style="margin-left: 5%" Size="@Size.Small" Variant="@MudBlazor.Variant.Filled" OnClick="@(() => GoToSectionDetailed(context.Item.Id))" Color="@Color.Primary">Перейти</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
</MudContainer>
@code {

    [Parameter]
    public int Id { get; set; }

    private string _searchString = "";


    private string savedTeacherName;
    private Teacher? currentTeacher;

    private MudDataGrid<SectionInfo> _mudDataGrid;

    protected override async Task OnInitializedAsync()
    {
        await GetTeacherData();
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _mudDataGrid.ReloadServerData();
    }

    Func<SectionInfo, object> _groupBy = x =>
    {
        return x.TypeName;
    };

    private bool IsTeacherNameChange()
    {
        if(currentTeacher?.Name != savedTeacherName)
        {
            return true;
        }
        return false;
    }

    private void GoToSectionDetailed(int sectionId)
    {
        NavigationManager.NavigateTo($"/teacher/{sectionId}");
    }

    private async Task GetTeacherData()
    {
        var result = await Sender.Send(new TeacherInfoQuery(Id));
        if (result is not null)
        {
            currentTeacher = result;
            savedTeacherName = currentTeacher.Name;
        }
    }

    private async Task EditTeacher(Teacher teacher)
    {
        var editTeacherCommand = new EditTeacherNameCommand(teacher);
        var res = await Sender.Send(editTeacherCommand);

        await _mudDataGrid.ReloadServerData();

        await GetTeacherData();
    }

    private async Task<GridData<SectionInfo>> GetData(GridState<SectionInfo> state)
    {
        var filters = new List<FilterDefinition>();

        filters.Add(new FilterDefinition { FieldName = nameof(SectionInfo.TeacherId), Value = Id, Operand = FilterOperand.Equal });

        var result = await Sender.Send(new TeacherSectionsInfoQuery(new ListParam()
            {
                Sorting = state.SortDefinitions.Select(x => new SortingDefinition()
                {
                    FieldName = x.SortBy,
                    Asc = !x.Descending
                }).ToArray(),
                Filters = filters.ToArray()
            }));

        return new GridData<SectionInfo>() { Items = result.Items, TotalItems = result.TotalItemsCount };
    }
}
