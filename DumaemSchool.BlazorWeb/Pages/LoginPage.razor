@page "/login"
@using DumaemSchool.BlazorWeb.Data
@using Microsoft.AspNetCore.Identity
@using DumaemSchool.Auth.Models
@using DumaemSchool.Auth.Managers
@using DumaemSchool.BlazorWeb.Middleware

@inject UserManager<SchoolUser> UserManager;
@inject SchoolSignInManager SignInManager;
@inject NavigationManager NavigationManager;
@inject ISnackbar Snackbar;


<MudForm @ref="@_form" @onsubmit="@(() => LogInAsync())">
    <MudContainer Class="d-flex align-center justify-center mud-width-full" style="height:70vh;">
        <MudGrid>
            <MudItem xs="12" sm="12" lg="12">
                @if (_isLoginWithPassword)
                {
                    <PasswordLoginForm Model="@_model"/>
                }
                else
                {
                    <EmailLoginForm Model="_model"/>
                }
                <MudLink OnClick="@ChangeLoginForm" Underline="Underline.Always" Style="text-align: center;
                                                                                            display: block;
                                                                                            margin: 0 auto;"
                         Class="mt-3">
                    @(_isLoginWithPassword ? "Забыли пароль?" : "Войти по паролю")
                </MudLink>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudForm>

@code {
    MudForm? _form;

    private readonly LoginCredentials _model = new();

    private bool _isLoginWithPassword = true;

    private void ChangeLoginForm()
    {
        _isLoginWithPassword = !_isLoginWithPassword;
    }

    private async Task LogInAsync()
    {
        var user = await UserManager.FindByEmailAsync(_model.Email);
        if (user is null)
        {
            Snackbar.Add("Пользователь отсутствует в системе", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
    // // TODO: пользователь не существует
    // throw new NotImplementedException();
        }

        if (!await SignInManager.CanSignInAsync(user))
        {
            Snackbar.Add("Пользователь более не имеет доступа к системе", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
    // // TODO: учитель уволен (удален)
    // throw new NotImplementedException();
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, _model.Password, false);
        if (!result.Succeeded)
        {
            Snackbar.Add("Неверный пароль", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
    // // TODO: неверный пароль
    // throw new NotImplementedException();
        }

        var key = Guid.NewGuid();
        AuthenticationMiddleware.Logins[key] = _model;
        NavigationManager.NavigateTo($"/login?key={key}", true);
    }

}