@inject UserManager<SchoolUser> UserManager;
@inject SchoolSignInManager SignInManager;
@inject NavigationManager NavigationManager;
@inject ISnackbar Snackbar;


<MudForm @ref="@_form" @onsubmit="@(() => LogInAsync())">
    <MudContainer Class="d-flex align-center justify-center mud-width-full" style="height:70vh;">
        <MudGrid>
            <MudItem xs="12" sm="12" lg="12">
                <MudCard>
                    <MudCardHeader>
                        <h2>Авторизация</h2>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField Label="Почта" Class="mt-3" Required="true"
                                      @bind-Value="Model.Email" InputType="InputType.Email" Immediate For="@(() => Model.Email)"/>

                        <MudTextField Label="Пароль" Class="mt-3"
                                      @bind-Value="Model.Password" Immediate For="@(() => Model.Password)"
                                      Required="true" InputType="_passwordInput"
                                      Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                      OnAdornmentClick="ShowPasswordClick" AdornmentAriaLabel="Показать пароль"/>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Disabled="@(!IsFormFilled())" ButtonType="MudBlazor.ButtonType.Submit"
                                   Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="width:12%">
                            Войти
                        </MudButton>
                    </MudCardActions>
                </MudCard>
                <MudLink OnClick="@ChangeLoginForm" Underline="Underline.Always" 
                         Style="text-align: center; display: block; margin: 0 auto;" Class="mt-3">
                    Забыли пароль?
                </MudLink>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudForm>

@code {

    [Parameter]
    public LoginCredentials Model { get; set; } = null!;

    [Parameter]
    public Action ChangeLoginForm { get; set; } = null!;

    MudForm? _form;

    bool _isShowPassword;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPasswordClick()
    {
        @if (_isShowPassword)
        {
            _isShowPassword = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShowPassword = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private bool IsFormFilled()
    {
        return Model.Email != "" && Model.Password != "";
    }

    private async Task LogInAsync()
    {
        var user = await UserManager.FindByEmailAsync(Model.Email);
        if (user is null)
        {
            Snackbar.Add("Пользователь отсутствует в системе", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
        }

        if (!await SignInManager.CanSignInAsync(user))
        {
            Snackbar.Add("Пользователь более не имеет доступа к системе", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, Model.Password, false);
        if (!result.Succeeded)
        {
            Snackbar.Add("Неверный пароль", Severity.Error, config => { config.VisibleStateDuration = 1000; });
            return;
        }

        var key = Guid.NewGuid();
        AuthenticationMiddleware.Logins[key] = Model;
        NavigationManager.NavigateTo($"/login?key={key}", true);
    }

}