@using DumaemSchool.BlazorWeb.Data.Converters;
@using DumaemSchool.BlazorWeb.Shared.Dialogs;
@using DumaemSchool.Core.Commands.Section;
@using DumaemSchool.Core.DataManipulation;
@using DumaemSchool.Core.OutputModels;
@using DumaemSchool.Core.Queries;
@using DumaemSchool.Core.Queries.Section;
@using MediatR;

@inject ISender Sender;
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
    <MudDataGrid @ref="@_mudDataGrid" ServerData="@GetData" T="SectionStudent" Filterable="true" SortMode="@SortMode.Multiple"
        Groupable="false" Hideable="true">

        <ToolBarContent>
            <MudTextField Style="margin-left: 70%" ValueChanged="@(EventCallback.Factory.Create<string>(this, OnSearch))"
                    Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>


        <Columns>
            <PropertyColumn Filterable="true" Property="x => x.StudentName" SortBy="x => x.StudentName" Title="ФИО учащегося" />
            <PropertyColumn Filterable="false" Property="x => x.DateAdded" SortBy="x => x.DateAdded" Title="Дата добавления студента в кружок" />

            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Style="margin-left: 53%" Size="@Size.Small" Variant="@MudBlazor.Variant.Filled" 
                            OnClick="@(async() => await DeleteStudentFromSection(context.Item.StudentId, context.Item.SectionId))" 
                            Color="@Color.Error">Удалить студента с кружка</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
</MudContainer>


@code {
    [Parameter] public int? SectionId { get; set; }

    private MudDataGrid<SectionStudent> _mudDataGrid = null!;

    private string _searchString = "";


    private void OnSearch(string text)
    {
        _searchString = text;
        _mudDataGrid.ReloadServerData();
    }

    private async Task DeleteStudentFromSection(int studentId, int sectionId)
    {
        bool isAgreedToDelete = await IsSuccessDeleteDialogResult();

        if (!isAgreedToDelete)
        {
            return;
        }

        var deleteStudentCommand = new DeleteStudentFromSectionCommand(studentId, sectionId);
        var res = await Sender.Send(deleteStudentCommand);

        await _mudDataGrid.ReloadServerData();

    }

    private async Task<bool> IsSuccessDeleteDialogResult()
    {
        var options = new MudBlazor.DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
            {
                ["DialogContent"] = "Вы уверены, что хотите удалить данного студента с кружка?"
            };
        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение удаления", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }

    private async Task<GridData<SectionStudent>> GetData(GridState<SectionStudent> state)
    {
        var filters = new List<FilterDefinition>();
        if (SectionId is not null)
        {
            filters.Add(new FilterDefinition { FieldName = nameof(SectionStudent.SectionId), Value = SectionId, Operand = FilterOperand.Equal });
        }
        filters.Add(new FilterDefinition { FieldName = nameof(SectionStudent.StudentName), Value = _searchString, Operand = FilterOperand.Contains });

        var result = await Sender.Send(new SectionStudentQuery(FilterConverter.GenerateParamsFromGrid(state, filters)));

        return new GridData<SectionStudent> { Items = result.Items, TotalItems = result.TotalItemsCount };
    }

}
