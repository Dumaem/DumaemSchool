@using DumaemSchool.Core.Commands.Section;
@using DumaemSchool.Core.Queries.Section;

@inject ISender Sender;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService


<MudContainer Style="margin-left: 0%; margin-top: 2%">
    <MudItem xs="6" sm="6" md="4">
        <MudText Typo="Typo.h6">Добавление учеников на кружок</MudText>
        <MudSpacer/>

        <MudAutocomplete Variant="MudBlazor.Variant.Outlined" T="StudentToAddToSection" Label="ФИО ученика"
                         @bind-Value="_selectedStudent" SearchFunc="@SearchStudentsToAdd" ResetValueOnEmptyText="@true"
                         ToStringFunc="@(e => e == null ? null : $"{e.Name}")"/>

        <MudButton Disabled="@(_selectedStudent is null)"
                   Style="margin-top: 2%" Variant="MudBlazor.Variant.Filled" OnClick="@AddStudentToSection" Color="Color.Primary">
            Записать студента на кружок
        </MudButton>
    </MudItem>
</MudContainer>


<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">

    <MudDataGrid @ref="@_mudDataGrid" ServerData="@GetData" T="SectionStudent" Filterable="true" SortMode="@SortMode.Multiple"
                 Groupable="false" Hideable="true" Striped="true">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Список учеников, записанных на кружок</MudText>
            <MudSpacer/>
            <MudTextField Style="margin-left: 60%" ValueChanged="@(EventCallback.Factory.Create<string>(this, OnSearch))"
                          Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>


        <Columns>
            <PropertyColumn Filterable="true" Property="x => x.StudentName" SortBy="x => x.StudentName" Title="ФИО учащегося"/>
            <PropertyColumn Filterable="false" Property="x => x.DateAdded" SortBy="x => x.DateAdded" Title="Дата добавления студента в кружок"/>

            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Style="margin-left: 53%" Size="@Size.Small" Variant="@MudBlazor.Variant.Filled"
                                       OnClick="@(async () => await DeleteStudentFromSection(context.Item.StudentId, context.Item.SectionId))"
                                       Color="@Color.Error" Icon="@Icons.Material.Filled.Delete"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
</MudContainer>


@code {

    [Parameter]
    public int SectionId { get; set; }

    private MudDataGrid<SectionStudent> _mudDataGrid = null!;

    private string _searchString = "";

    private StudentToAddToSection? _selectedStudent;

    private void OnSearch(string text)
    {
        _searchString = text;
        _mudDataGrid.ReloadServerData();
    }

    private async Task DeleteStudentFromSection(int studentId, int sectionId)
    {
        bool isAgreedToDelete = await IsSuccessDeleteDialogResult();

        if (!isAgreedToDelete)
        {
            return;
        }

        var deleteStudentCommand = new DeleteStudentFromSectionCommand(studentId, sectionId);
        var res = await Sender.Send(deleteStudentCommand);

        await _mudDataGrid.ReloadServerData();
    }

    private async Task<IEnumerable<StudentToAddToSection>> SearchStudentsToAdd(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return (await Sender.Send(new SectionStudentsToAddQuery(new ListParam
            {
                Filters = new[]
                {
                    new FilterDefinition
                    {
                        Value = SectionId, Operand = FilterOperand.Equal,
                        FieldName = nameof(StudentToAddToSection.SectionId)
                    }
                }
            }))).Items.ToList();
        }

        return (await Sender.Send(new SectionStudentsToAddQuery(new ListParam
        {
            Filters = new[]
            {
                new FilterDefinition
                {
                    Value = SectionId, Operand = FilterOperand.Equal,
                    FieldName = nameof(StudentToAddToSection.SectionId)
                },
                new FilterDefinition
                {
                    Value = value, Operand = FilterOperand.Contains,
                    FieldName = nameof(StudentToAddToSection.Name)
                }
            }
        }
            ))).Items.ToList();
    }

    private async Task<bool> IsStudentAvailable()
    {
        var listSchedulesForSection = (await Sender.Send(new SectionScheduleQuery(new ListParam
        {
            Filters = new[]
            {
                new FilterDefinition
                {
                    Value = SectionId, Operand = FilterOperand.Equal,
                    FieldName = nameof(SectionSchedule.SectionId)
                }
            }
        }))).Items.ToList();

        var checkStudentCommand = new CheckStudentAvailabilityToSectionCommand(_selectedStudent!.Id, listSchedulesForSection);
        var res = await Sender.Send(checkStudentCommand);

        return res;
    }

    public async Task AddStudentToSection()
    {
        if (!await IsStudentAvailable())
        {
            Snackbar.Add("Расписание кружков, на которые записан студент, пересекается с расписанием данного кружка!", Severity.Warning);
            return;
        }

        var isAgreedToAdd = await IsSuccessAddDialogResult();

        if (!isAgreedToAdd)
        {
            return;
        }

        var addStudentToSectionCommand = new AddStudentToSectionCommand(_selectedStudent!.Id, SectionId);
        var res = await Sender.Send(addStudentToSectionCommand);

        Snackbar.Add("Студент успешно записан на кружок!", Severity.Success);

        _selectedStudent = null;

        await _mudDataGrid.ReloadServerData();
    }

    private async Task<bool> IsSuccessDeleteDialogResult()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var parameters = new DialogParameters
        {
            ["DialogContent"] = "Вы уверены, что хотите удалить данного студента с кружка?",
            ["Color"] = MudBlazor.Color.Error
        };
        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение удаления", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }

    private async Task<bool> IsSuccessAddDialogResult()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var parameters = new DialogParameters
        {
            ["DialogContent"] = "Вы уверены, что хотите записать данного студента на кружок?",
            ["Color"] = MudBlazor.Color.Primary
        };

        var dialog = await DialogService.ShowAsync<DialogWindow>("Подтверждение записи", parameters, options);

        var result = await dialog.Result;

        return !result.Canceled;
    }

    private async Task<GridData<SectionStudent>> GetData(GridState<SectionStudent> state)
    {
        var filters = new List<FilterDefinition>();

        filters.Add(new FilterDefinition {FieldName = nameof(SectionStudent.SectionId), Value = SectionId, Operand = FilterOperand.Equal});
        filters.Add(new FilterDefinition {FieldName = nameof(SectionStudent.StudentName), Value = _searchString, Operand = FilterOperand.Contains});

        var result = await Sender.Send(new SectionStudentQuery(FilterConverter.GenerateParamsFromGrid(state, filters)));

        return new GridData<SectionStudent> {Items = result.Items, TotalItems = result.TotalItemsCount};
    }

}