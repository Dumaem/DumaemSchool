@using MediatR
@using DumaemSchool.Core.OutputModels
@using DumaemSchool.Core.Queries
@using DumaemSchool.Core.DataManipulation
@using DumaemSchool.BlazorWeb.Data.Converters
@inject NavigationManager NavigationManager;
@inject ISender Sender;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
    <MudDataGrid T="SectionInfo" ServerData="GetData">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Список кружков</MudText>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Filterable="false" Property="x => x.Id" Title="Id"/>
            @if (TeacherId is null)
            {
                <PropertyColumn Filterable="true" Property="x => x.TeacherName" SortBy="x => x.TeacherName" Title="ФИО преподавателя"/>
            }
            <PropertyColumn Filterable="true" Property="x => x.GroupName" SortBy="x => x.GroupName" Title="Наименование группы"/>
            <PropertyColumn Filterable="true" Property="x => x.TypeName" SortBy="x => x.TypeName" Title="Наименование вида кружка"/>
            <PropertyColumn Filterable="true" Property="x => x.LessonPerWeek" SortBy="x => x.LessonPerWeek" Title="Количество занятий в неделю"/>
            <TemplateColumn Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudButton Style="margin-left: 5%" Size="@Size.Small" Variant="@MudBlazor.Variant.Filled" OnClick="@(() => NavigationManager.NavigateTo($"/section/{context.Item.Id}"))" Color="@Color.Primary">Перейти</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="SectionInfo"/>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {

    [Parameter]
    public int? TeacherId { get; set; }

    private MudDataGrid<SectionInfo> _mudDataGrid;

    private async Task<GridData<SectionInfo>> GetData(GridState<SectionInfo> state)
    {
        var filters = new List<FilterDefinition>();
        if (TeacherId is not null)
        {
            filters.Add(new FilterDefinition {FieldName = nameof(SectionInfo.TeacherId), Value = TeacherId, Operand = FilterOperand.Equal});
        }

        var result = await Sender.Send(new SectionsInfoQuery(FilterConverter<SectionInfo>.GenerateParamsFromGrid(state, filters)));

        return new GridData<SectionInfo> {Items = result.Items, TotalItems = result.TotalItemsCount};
    }

}