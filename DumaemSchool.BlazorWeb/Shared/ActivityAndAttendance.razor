@using DumaemSchool.BlazorWeb.Data.Converters;
@using DumaemSchool.BlazorWeb.Shared.Dialogs;
@using DumaemSchool.Core.Commands.Section;
@using DumaemSchool.Core.DataManipulation;
@using DumaemSchool.Core.OutputModels;
@using DumaemSchool.Core.Queries;
@using DumaemSchool.Core.Queries.Lesson;
@using DumaemSchool.Core.Queries.Section;
@using MediatR;

@inject ISender Sender;
@inject IDialogService DialogService

<MudDatePicker Style="margin-left: 70%" DateChanged="@((e) => OnDateChange(e!.Value))">
</MudDatePicker>


<MudContainer MaxWidth="MaxWidth.ExtraLarge" style="height:70vh; margin-top: 2%">
    <MudDataGrid @ref="@_mudDataGrid" ServerData="@GetData" T="StudentLessonStatistics" Filterable="true" SortMode="@SortMode.Multiple"
                 Groupable="false" Hideable="true">

        <ToolBarContent>
            <MudTextField Style="margin-left: 70%" ValueChanged="@(EventCallback.Factory.Create<string>(this, OnSearch))"
                          Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>


        <Columns>
            <PropertyColumn Filterable="true" Property="x => x.StudentName" SortBy="x => x.StudentName" Title="ФИО учащегося" />
            <PropertyColumn Filterable="true" Property="x => x.WasAttended" SortBy="x => x.WasAttended" Title="Присутствовал ли ученик на уроке" />
            <PropertyColumn Filterable="true" Property="x => x.ActivityMark" SortBy="x => x.ActivityMark" Title="Оценка за урок" />
        </Columns>

    </MudDataGrid>
</MudContainer>


@code {
    [Parameter] public int? SectionId { get; set; }

    private MudDataGrid<StudentLessonStatistics> _mudDataGrid = null!;

    private IEnumerable<LessonDate>? lessonDates;

    private DateTime? selectedDateTime;
    private LessonDate? selectedLessonDate;

    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLessonsDates();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OnDateChange(DateTime date)
    {
        selectedDateTime = date;
        selectedLessonDate = lessonDates!.FirstOrDefault(x => x.ConductionDate == DateOnly.FromDateTime(selectedDateTime.Value));
        _mudDataGrid.ReloadServerData();
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _mudDataGrid.ReloadServerData();
    }

    private async Task GetLessonsDates()
    {
        var result = await Sender.Send(new LessonDatesQuery(SectionId!.Value));
        lessonDates = result;
    }

    private async Task<GridData<StudentLessonStatistics>> GetData(GridState<StudentLessonStatistics> state)
    {
        var filters = new List<FilterDefinition>();
        if (selectedDateTime is null || selectedLessonDate is null)
        {
            return new GridData<StudentLessonStatistics> { Items = Array.Empty<StudentLessonStatistics>(), TotalItems = 0 };
        }
        else
        {
            filters.Add(new FilterDefinition
                {
                    FieldName = nameof(StudentLessonStatistics.LessonId),
                    Value = selectedLessonDate?.LessonId,
                    Operand = FilterOperand.Equal
                });
        }

        filters.Add(new FilterDefinition { FieldName = nameof(StudentLessonStatistics.StudentName), Value = _searchString, Operand = FilterOperand.Contains });

        var result = await Sender.Send(new StudentLessonStatisticsQuery(FilterConverter.GenerateParamsFromGrid(state, filters)));

        return new GridData<StudentLessonStatistics> { Items = result.Items, TotalItems = result.TotalItemsCount };
    }

}
